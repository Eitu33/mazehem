// TODO: server authority
// TODO: send maze
// TODO: encrypt connections
// TODO: add clients version
if self.network.host {
    self.network
        .socket
        .as_mut()
        .unwrap()
        .manual_poll(Instant::now());
    while let Some(pkt) = self.network.socket.as_mut().unwrap().recv() {
        match pkt {
            SocketEvent::Packet(pkt) => match deserialize::<Data>(pkt.payload()).unwrap() {
                Data::SocketAddr(addr) if !self.network.clients.contains(&addr) => {
                    self.network.clients.push(addr);
                    println!(
                        "CELLS SEND RESULT: {:#?}",
                        self.network
                            .socket
                            .as_mut()
                            .unwrap()
                            .send(Packet::reliable_unordered(
                                addr,
                                serialize(&Data::Cells(
                                    self.cells.clone().into_values().collect(),
                                ))
                                .unwrap(),
                            ))
                    );
                }
                _ => (),
            },
            _ => (),
        }
    }
    for addr in &self.network.clients {
        self.network
            .socket
            .as_mut()
            .unwrap()
            .send(Packet::unreliable(
                *addr,
                serialize(&Data::Player(self.player.clone())).unwrap(),
            ));
    }
// CLIENT
} else {
    self.network
        .socket
        .as_mut()
        .unwrap()
        .manual_poll(Instant::now());
    while let Some(pkt) = self.network.socket.as_mut().unwrap().recv() {
        match pkt {
            SocketEvent::Packet(pkt) => {
                // println![
                //     "received: {:#?}",
                //     deserialize::<Data>(pkt.payload()).unwrap()
                // ];
                match deserialize::<Data>(pkt.payload()).unwrap() {
                    Data::Player(player) => players.push(player),
                    Data::Cells(cells) => {
                        println!("GOES IN");
                        self.cells = vec_to_imap(cells)
                    }
                    _ => (),
                }
            }
            _ => (),
        }
    }
    self.network
        .socket
        .as_mut()
        .unwrap()
        .send(Packet::unreliable(
            self.network.host_addr.unwrap(),
            serialize(&Data::SocketAddr(self.network.self_addr)).unwrap(),
        ));
}