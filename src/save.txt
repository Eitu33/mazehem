match self.network.host {
    // receive
    true => {
        println!("SERVER TEST 1");
        self.network
            .socket
            .as_mut()
            .unwrap()
            .manual_poll(Instant::now());
        while let Some(pkt) = self.network.socket.as_mut().unwrap().recv() {
            println!("SERVER TEST 2");
            match pkt {
                SocketEvent::Packet(pkt) => {
                    println!("SERVER TEST 3");
                    // println!["{:#?}", deserialize::<Data>(pkt.payload()).unwrap()];
                    match deserialize::<Data>(pkt.payload()).unwrap() {
                        Data::Player(player) => players.push(player),
                        Data::SocketAddr(addr) => self.network.clients.push(addr),
                    }
                }
                _ => (),
            }
        }
        // send
        println!("SERVER TEST 4");
        players.push(self.player.clone());
        for addr in &self.network.clients {
            for p in &players {
                self.network
                    .socket
                    .as_mut()
                    .unwrap()
                    .send(Packet::unreliable(*addr, serialize(&Data::Player(p)).unwrap()));
            }
        }
    }
    false => {
        let self_addr = SocketAddr::new(local_ip().unwrap(), 9090);
        println!("{}", self_addr);
        self.network
            .socket
            .as_mut()
            .unwrap()
            .send(Packet::unreliable(
                self.network.addr,
                serialize(&Data::SocketAddr(self_addr)).unwrap(),
            ));
        println!("CLIENT TEST 1");
        self.network
            .socket
            .as_mut()
            .unwrap()
            .manual_poll(Instant::now());
        while let Some(pkt) = self.network.socket.as_mut().unwrap().recv() {
            println!("CLIENT TEST 2");
            match pkt {
                SocketEvent::Packet(pkt) => {
                    println!("CLIENT TEST 3");
                    println!["{:#?}", deserialize::<Data>(pkt.payload()).unwrap()];
                    match deserialize::<Data>(pkt.payload()).unwrap() {
                        Data::Player(player) => players.push(player),
                        _ => (),
                    }
                }
                _ => (),
            }
        }
    }
}